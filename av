#!/bin/bash

read -r -d "" AV_HELP << EOF
NAME
    av - aws-vault shortcuts

SYNOPSIS
    av help
    av show [--only-running] [ec2|rds]
    av profile NEW_AWS_PROFILE
    av COMMAND

DESCRIPTION
    This command bundles shortcuts for aws-vault invocation.

    In simplest form,
        av COMMAND
    is equivalent to
        aws-vault exec \$AWS_PROFILE -- COMMAND

    "av show" contains shortcuts for common filters to wade through verbose aws CLI responses.

    Multiple av invocations can be combined, but there can only be one COMMAND and it has
    to be the last thing you do. For example:

        av  profile staging show ec2 rds aws sts get-caller-identity

    breaks down as

        av [set profile] [list ec2] [list rds] [run AWS CLI command]
EOF

function show(){
    local args_shifted=0
    local json=$(mktemp)
    local SKIP_VAULT=""

    if $NO_VAULT; then
        SKIP_VAULT="--no-vault"
    fi

    while true; do
        case "$1" in
            --only-running)
                SHOW_STOPPED=false
                shift
                args_shifted=$(expr $args_shifted + 1)
                ;;
            ec2)
                av $SKIP_VAULT aws ec2 describe-instances > $json

                echo "Running:" >&2
                cat $json | jq '[[.Reservations[].Instances[]|{id:.InstanceId,name:(.Tags[]|select(.Key=="Name")|.Value),public_fqdn:.PublicDnsName,private_fqdn:.PrivateDnsName,type:.InstanceType,status:.State.Name}]|sort_by(.name)|.[]|select(.status=="running")]'

                if $SHOW_STOPPED; then
                    echo "Not running:" >&2
                    cat $json | jq '[[.Reservations[].Instances[]|{id:.InstanceId,name:(.Tags[]|select(.Key=="Name")|.Value),type:.InstanceType,status:.State.Name}]|sort_by(.name)|.[]|select(.status!="running")]'
                fi

                shift
                args_shifted=$(expr $args_shifted + 1)
                ;;
            rds)
                av $SKIP_VAULT aws rds describe-db-instances > $json

                echo "Available:" >&2
                cat $json | jq '[[.DBInstances[]|{id:.DBInstanceIdentifier,cluster:.DBClusterIdentifier,type:.DBInstanceClass,version:.EngineVersion,multiAZ:.MultiAZ,status:.DBInstanceStatus,AZ:.AvailabilityZone}]|sort_by(.id)|.[]|select(.status=="available")]'

                if $SHOW_STOPPED; then
                    echo "Unavailable:" >&2
                    cat $json | jq '[[.DBInstances[]|{id:.DBInstanceIdentifier,cluster:.DBClusterIdentifier,type:.DBInstanceClass,version:.EngineVersion,multiAZ:.MultiAZ,status:.DBInstanceStatus,AZ:.AvailabilityZone}]|sort_by(.id)|.[]|select(.status!="available")]'
                fi

                shift
                args_shifted=$(expr $args_shifted + 1)
                ;;
            *)
                break
                ;;
        esac
    done

    rm -f $json

    return $args_shifted
}

if [ -z "$1" ]; then
    echo "$AV_HELP"
    exit 1
fi

NO_VAULT=false
SHOW_STOPPED=true

while true; do
    case "$1" in
        -h|--help|help)
            echo "$AV_HELP"
            exit 1
            ;;
        --no-vault)
            NO_VAULT=true
            shift
            ;;
        --only-running)
            SHOW_STOPPED=false
            shift
            ;;
        p|prof|profile)
            export AWS_PROFILE=$2
            shift 2
            ;;
        show)
            shift
            show $*
            shift $?
            ;;
        *)
            break
            ;;
    esac
done

if [ -n "$1" ]; then
    if $NO_VAULT; then
        AWS_PROFILE=$AWS_PROFILE $*
    else
        aws-vault exec $AWS_PROFILE -- $*
    fi
fi
